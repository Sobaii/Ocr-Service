// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/ocr_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OcrService_CreateFolder_FullMethodName       = "/ocr_service.OcrService/CreateFolder"
	OcrService_SearchFolders_FullMethodName      = "/ocr_service.OcrService/SearchFolders"
	OcrService_SearchFileData_FullMethodName     = "/ocr_service.OcrService/SearchFileData"
	OcrService_ExtractFileData_FullMethodName    = "/ocr_service.OcrService/ExtractFileData"
	OcrService_ModifyExpenseField_FullMethodName = "/ocr_service.OcrService/ModifyExpenseField"
	OcrService_DeleteExpense_FullMethodName      = "/ocr_service.OcrService/DeleteExpense"
)

// OcrServiceClient is the client API for OcrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcrServiceClient interface {
	CreateFolder(ctx context.Context, in *FolderCreationRequest, opts ...grpc.CallOption) (*FolderCreationResponse, error)
	SearchFolders(ctx context.Context, in *FolderSearchRequest, opts ...grpc.CallOption) (*FolderSearchResponse, error)
	SearchFileData(ctx context.Context, in *SearchFileRequest, opts ...grpc.CallOption) (*SearchFileResponse, error)
	ExtractFileData(ctx context.Context, in *ExtractFileRequest, opts ...grpc.CallOption) (*ExtractFileResponse, error)
	ModifyExpenseField(ctx context.Context, in *ModifyExpenseFieldRequest, opts ...grpc.CallOption) (*ModifyExpenseFieldResponse, error)
	DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error)
}

type ocrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOcrServiceClient(cc grpc.ClientConnInterface) OcrServiceClient {
	return &ocrServiceClient{cc}
}

func (c *ocrServiceClient) CreateFolder(ctx context.Context, in *FolderCreationRequest, opts ...grpc.CallOption) (*FolderCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderCreationResponse)
	err := c.cc.Invoke(ctx, OcrService_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocrServiceClient) SearchFolders(ctx context.Context, in *FolderSearchRequest, opts ...grpc.CallOption) (*FolderSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FolderSearchResponse)
	err := c.cc.Invoke(ctx, OcrService_SearchFolders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocrServiceClient) SearchFileData(ctx context.Context, in *SearchFileRequest, opts ...grpc.CallOption) (*SearchFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFileResponse)
	err := c.cc.Invoke(ctx, OcrService_SearchFileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocrServiceClient) ExtractFileData(ctx context.Context, in *ExtractFileRequest, opts ...grpc.CallOption) (*ExtractFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractFileResponse)
	err := c.cc.Invoke(ctx, OcrService_ExtractFileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocrServiceClient) ModifyExpenseField(ctx context.Context, in *ModifyExpenseFieldRequest, opts ...grpc.CallOption) (*ModifyExpenseFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyExpenseFieldResponse)
	err := c.cc.Invoke(ctx, OcrService_ModifyExpenseField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocrServiceClient) DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExpenseResponse)
	err := c.cc.Invoke(ctx, OcrService_DeleteExpense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcrServiceServer is the server API for OcrService service.
// All implementations must embed UnimplementedOcrServiceServer
// for forward compatibility
type OcrServiceServer interface {
	CreateFolder(context.Context, *FolderCreationRequest) (*FolderCreationResponse, error)
	SearchFolders(context.Context, *FolderSearchRequest) (*FolderSearchResponse, error)
	SearchFileData(context.Context, *SearchFileRequest) (*SearchFileResponse, error)
	ExtractFileData(context.Context, *ExtractFileRequest) (*ExtractFileResponse, error)
	ModifyExpenseField(context.Context, *ModifyExpenseFieldRequest) (*ModifyExpenseFieldResponse, error)
	DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error)
	mustEmbedUnimplementedOcrServiceServer()
}

// UnimplementedOcrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOcrServiceServer struct {
}

func (UnimplementedOcrServiceServer) CreateFolder(context.Context, *FolderCreationRequest) (*FolderCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedOcrServiceServer) SearchFolders(context.Context, *FolderSearchRequest) (*FolderSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFolders not implemented")
}
func (UnimplementedOcrServiceServer) SearchFileData(context.Context, *SearchFileRequest) (*SearchFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFileData not implemented")
}
func (UnimplementedOcrServiceServer) ExtractFileData(context.Context, *ExtractFileRequest) (*ExtractFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFileData not implemented")
}
func (UnimplementedOcrServiceServer) ModifyExpenseField(context.Context, *ModifyExpenseFieldRequest) (*ModifyExpenseFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyExpenseField not implemented")
}
func (UnimplementedOcrServiceServer) DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpense not implemented")
}
func (UnimplementedOcrServiceServer) mustEmbedUnimplementedOcrServiceServer() {}

// UnsafeOcrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcrServiceServer will
// result in compilation errors.
type UnsafeOcrServiceServer interface {
	mustEmbedUnimplementedOcrServiceServer()
}

func RegisterOcrServiceServer(s grpc.ServiceRegistrar, srv OcrServiceServer) {
	s.RegisterService(&OcrService_ServiceDesc, srv)
}

func _OcrService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcrService_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).CreateFolder(ctx, req.(*FolderCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcrService_SearchFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).SearchFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcrService_SearchFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).SearchFolders(ctx, req.(*FolderSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcrService_SearchFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).SearchFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcrService_SearchFileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).SearchFileData(ctx, req.(*SearchFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcrService_ExtractFileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).ExtractFileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcrService_ExtractFileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).ExtractFileData(ctx, req.(*ExtractFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcrService_ModifyExpenseField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyExpenseFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).ModifyExpenseField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcrService_ModifyExpenseField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).ModifyExpenseField(ctx, req.(*ModifyExpenseFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcrService_DeleteExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).DeleteExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OcrService_DeleteExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).DeleteExpense(ctx, req.(*DeleteExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcrService_ServiceDesc is the grpc.ServiceDesc for OcrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocr_service.OcrService",
	HandlerType: (*OcrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFolder",
			Handler:    _OcrService_CreateFolder_Handler,
		},
		{
			MethodName: "SearchFolders",
			Handler:    _OcrService_SearchFolders_Handler,
		},
		{
			MethodName: "SearchFileData",
			Handler:    _OcrService_SearchFileData_Handler,
		},
		{
			MethodName: "ExtractFileData",
			Handler:    _OcrService_ExtractFileData_Handler,
		},
		{
			MethodName: "ModifyExpenseField",
			Handler:    _OcrService_ModifyExpenseField_Handler,
		},
		{
			MethodName: "DeleteExpense",
			Handler:    _OcrService_DeleteExpense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ocr_service.proto",
}
